import asyncio
import logging
import os

from aiogram import F
from aiogram.client.bot import Bot
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.dispatcher.router import Router
from aiogram.filters import Command, Text
from aiogram.types import Message, CallbackQuery
from aiogram.types.bot_command import BotCommand
from telegram.parsemode import ParseMode

from minigame import Game, PROMPT, GAME_STATUS, PLAYER_STATUS, ALREADY_PICKED_SLOT, GAME_ENDING, GAME_ENDED, \
    RESULT_ANNOUNCEMENTS, END_PHRASE
from mongodb import create_user, create_game, get_top_users, get_random_anecdote, connect
from randomizer import *
from yandex import Yandex

client = connect()
db = client.get_database(os.environ.get('MONGO_DB_NAME'))

session = AiohttpSession()
bot = Bot(token=os.environ.get("API_TOKEN"), session=session)
dp = Dispatcher()
router = Router()
dp.include_router(router)

mini_game = Game()
yandex_helper = Yandex()


@router.message(Command(commands=['stt']))
async def stt(message: Message):
    if message.reply_to_message and message.reply_to_message.voice:
        text = yandex_helper.stt(message, bot)
        await message.reply(text)
    else:
        await message.reply('–ú–Ω–µ –Ω—É–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –µ–≥–æ  ü§¨')


@router.message(Command(commands=['tts']))
async def tts(message: Message):
    if message.reply_to_message and message.reply_to_message.text:
        file_path = yandex_helper.tts(text=message.reply_to_message.text, file_path='./audio_file.ogg')
        print(file_path)
        await message.reply_audio(audio=file_path)
        os.remove(file_path)
    elif message.text is not None:
        file_path = yandex_helper.tts(text=message.text)
        await message.reply_audio(audio=file_path)
        os.remove(file_path)
    else:
        await message.answer('–ú–Ω–µ –Ω—É–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –µ–≥–æ  ü§¨')


@router.message(Command(commands=['anecdote']))
async def anecdote(message: Message):
    random_anecdote = get_random_anecdote(db, message)
    await message.answer(random_anecdote or '–¢—ã –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è ü§¨')


@router.message(F.text.lower().contains('–∞–Ω–µ–∫'))
async def trigger(message: Message):
    random_anecdote = get_random_anecdote(db, message)
    await message.answer(random_anecdote or '–¢—ã –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è ü§¨')


@router.message(Command(commands=['c']))
async def test(message: Message):
    await message.answer(f'TESTING')


@router.message(Command(commands=['start']))
async def start(message: Message):
    created = create_user(db, message)

    if created:
        await message.reply(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±, @{message.from_user.username}')
    else:
        await message.reply(f'–° —Ç–æ–±–æ–π –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, @{message.from_user.username} üòÖ')


@router.message(Command(commands=['help']))
async def help(message: Message):
    await message.reply('–ù—É, —è –º–æ–≥—É –∞–Ω–µ–∫–¥–æ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å..?')


@router.message(Command(commands=['top']))
async def top(message: Message):
    top_users = get_top_users(db, message)
    leaderboard = '\n'.join(
        f'{emoji:^5}{idx + 1}\\.  @{user["username"]:<} \\- {user["points"]:<20}' for idx, (user, emoji) in
        enumerate(zip(top_users, get_random_emojis())))
    heading = "*–ì–ª–∞–≤–Ω—ã–µ –ª—é–±–∏—Ç–µ–ª–∏ _—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ_ —é–º–æ—Ä–∞:*"
    await message.answer(f'{heading:^}\n\n{leaderboard}', parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Command(commands=['leave']))
async def leave(message: Message):
    await message.reply('ü´†')


@router.message(Command(commands=['game']))
async def game(message: Message):
    mini_game.start_game()
    await message.answer('ü´†')
    await message.answer(PROMPT, reply_markup=mini_game.get_board())


@router.callback_query((~(F.data.in_({*GAME_STATUS, *PLAYER_STATUS}))))
async def process_picked_slot(callback_query: CallbackQuery):
    revealed_slot = mini_game.reveal(callback_query.from_user.id, callback_query.from_user.username,
                                     int(callback_query.data))
    print(callback_query.data)
    if revealed_slot == ALREADY_PICKED_SLOT:
        await callback_query.answer("–û–¥–Ω–∞ –∏–≥—Ä–∞ - –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ üòâ", show_alert=True)
    else:
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.message.chat.id,
                                    text=f'\n{callback_query.message.text}\n@{callback_query.from_user.username} '
                                         f'{RESULT_ANNOUNCEMENTS.get(revealed_slot)}',
                                    reply_markup=callback_query.message.reply_markup)


@router.callback_query(F.data.in_({*GAME_STATUS, *PLAYER_STATUS}))
async def process_game_results(callback_query: CallbackQuery):
    if callback_query.data == GAME_ENDING:
        game_results = mini_game.get_results()
        created = create_game(db, game_results)
        game_results_markup = mini_game.end_game()
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.message.chat.id,
                                    text=f'{callback_query.message.text}\n\n{END_PHRASE} @{callback_query.from_user.username}',
                                    reply_markup=game_results_markup)
    elif callback_query.data == GAME_ENDED:
        await callback_query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞!", show_alert=True)


async def setup_bot_commands():
    bot_commands = [
        BotCommand(command="anecdote", description="–ü—Ä–æ –í–æ–≤–æ—á–∫—É, –®—Ç–∏—Ä–ª–∏—Ü–∞, –ü–µ—Ç—å–∫—É –∏ –ß–∞–ø–∞–µ–≤–∞ ü•∏"),
        # BotCommand(command="start", description="–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É üòé"),
        BotCommand(command="game", description="–†—É–±–∞–Ω—É—Ç—å—Å—è üíÄ"),
        BotCommand(command="tts", description="–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"),
        BotCommand(command="stt", description="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç"),
        BotCommand(command="help", description="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å üôèüèª"),
        BotCommand(command="top", description="–£–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π üíØ"),
        BotCommand(command="leave", description="–£–π—Ç–∏ —Å –ø–æ–∑–æ—Ä–æ–º üèÉ‚Äç‚ôÄÔ∏èüí®"),
    ]
    await bot.set_my_commands(bot_commands)


async def main():
    await setup_bot_commands()
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logger = logging.getLogger(__name__)
    asyncio.run(main())
